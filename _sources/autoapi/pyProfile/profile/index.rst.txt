:py:mod:`pyProfile.profile`
===========================

.. py:module:: pyProfile.profile

.. autoapi-nested-parse::

   It is a library of functions for manipulation or related to optics, acting on a couple of lists x and y, of same length, representing a profile.

   It has only a simple reader (a thin wrapper around `np.genfromtxt`) and a function `register_profile` to align and rescale x and y. Since all functions act on single vectors x and y, more complex readers are not needed here and are left to profile_class.

   Created on Sun Mar 06 16:06:48 2016

   @author: Vincenzo Cotroneo
   @email: vincenzo.cotroneo@inaf.it



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pyProfile.profile.line
   pyProfile.profile.make_signal
   pyProfile.profile.test_make_Signal
   pyProfile.profile.make_circle
   pyProfile.profile.find_internal_interval
   pyProfile.profile.remove_nan_ends
   pyProfile.profile.polyfit_profile
   pyProfile.profile.register_profile
   pyProfile.profile.load_profile
   pyProfile.profile.merge_profile
   pyProfile.profile.save_profile
   pyProfile.profile.get_stats
   pyProfile.profile.level_profile
   pyProfile.profile.sort_profile
   pyProfile.profile.remove_profile_outliers
   pyProfile.profile.movingaverage
   pyProfile.profile.rebin_profile
   pyProfile.profile.crop_profile
   pyProfile.profile.resample_profile
   pyProfile.profile.sum_profiles
   pyProfile.profile.subtract_profiles
   pyProfile.profile.merge_profiles
   pyProfile.profile.calculate_barycenter
   pyProfile.profile.reflect_profile
   pyProfile.profile.calculate_HEW
   pyProfile.profile.plot_HEW
   pyProfile.profile.PSF_spizzichino
   pyProfile.profile.PSF_raimondiSR
   pyProfile.profile.test_reflect
   pyProfile.profile.test_HEW



.. py:function:: line(x, y=None)

   return line through end points of x,y.
       x and y are vectors, can be of different length (e.g. y can be a 2-elements vector).
   If only one vector is provided, it is assumend as equally spaced points.


.. py:function:: make_signal(amp, x=None, L=None, N=None, nwaves=None, phase=0, ystartend=(0, 0), noise=0.0, minus_one=False)

   Build a signal of length L and number of points N, as a sum of a cosinusoid, a line and a noise. minus_one remove last point (just a convenience e.g. for a periodic profile), note that in
   this case the returned x corresponds to values returned by
   np.arange e .linspace, however it needs to be called with N+1
   points, so the last one can be excluded and N points returned,
   keeping intervals consistent (this might change in future versions).
   Signal is generated on `x` if this is provided.
   Otherwise it is generated on length `L` (can be range).
   Phase adds a phase in radians (the armonic component of signal is defined as `amp*np.sin(2*np.pi*x/L*nwaves+phase)`).

   VC 2020/09/11 added option for L as range and x on which to generate signal.
   2020/07/17 make signal a cosine (it was a sine), because more consistent with real part of imaginary number.
   VC 2020/06/27 horrible interface with args, replace with kwargs with defaults.
   Added phase.
   OLD CODE NEEDS TO be UPDATED! TODO: file search


.. py:function:: test_make_Signal()


.. py:function:: make_circle(x, c, r, sign=1)

   plot positive part if sign is positive, negative if negative.


.. py:function:: find_internal_interval(x, y)

   find the largest interval of profile with all valid point.
   See pySurf.data2D.find_internal_rectangle.


.. py:function:: remove_nan_ends(x, y=None, internal=False)

   remove all y points at the two ends of profile that contains only nans in y. If internal is set, return the
   internal crop (largest internal segments without nans).


.. py:function:: polyfit_profile(x, y=None, degree=1, P=np.polynomial.Legendre)

   Use one of the poynomial bases in
      (default to Legendre), and return polynomial of given `degree` that fits the input profile `x`.

       Temporary function used to separate the numpy layer from the profile, as preferred implementation switched from np.polynomial functions to classes in np.polynomial.Polynomial, which is more flexible, but also has a more complex descriptor (*).
       This function is thinly wrapped by level_profile, the two will eventually merge, maybe with a flag `fit` to return fit or residuals.

       (*) Note that np coefficients are not directly the polynomial coefficient, e.g. [2,4] doesn't necessarily mean 2 + 4 * x
       There are two poorly documented parameters `window` and `domain` (both default to -1,1) which regulate the scaling of polynomial result. This means that the polynomial coefficients are first calculated on `window` (default [-1,1]) and the result returned shifted to match `domain` (equal to range of x).

       Most common usage is to set window to an interval on which the polynomial
       base is well behaving, and domain to the range of x.

       see: https://stackoverflow.com/questions/52339907/numpy-polynomial-generation/52469490
       https://github.com/numpy/numpy/issues/9533
       A detailed example of why using window and domain is here:
       https://numpy.org/doc/stable/reference/routines.polynomials.classes.html

       Some of the Polynomials bases are well-behaving, or orthonormal only on a given `window` of x (e.g. Legendre on [-1,1]), we usually want

   In using Chebyshev polynomials for fitting we want to use the region where x is between -1 and 1 and that is what the window specifies. However, it is unlikely that the data to be fit has all its data points in that interval, so we use domain to specify the interval where the data points lie. When the fit is done, the domain is first mapped to the window by a linear transformation and the usual least squares fit is done using the mapped data points. The window and domain of the fit are part of the returned series and are automatically used when computing values, derivatives, and such. If they arenâ€™t specified in the call the fitting routine will use the default window and the smallest domain that holds all the data points.

   (that seems in contradiction with numpy documentation that states both default to one).



.. py:function:: register_profile(x, y, scale=(1, 1), strip=False, crop=None, center=None, *args, **kwargs)

   get x,y and register them using usual set of parameters.

   registering operation are performed in the following order and are:
       scale: scale the two axis of the `scale` factor, if sign is changed, reorder.
       strip: if True, strip all nans at the border of the data.
       crop: list of ranges (2 axis) to pass to profile.crop_profile
       center: the final position of profile center, if 1 element, only x is centered, if 2 elements, y is centered also.
   This means e.g. that data are first cropped (or cleaned of invalid data) than centered. This means that the value puts in the provided coordinate(s) the center of points after cropping operations.

   unexpected parameters passed to register_data are ignored (*args and **kwargs are not used, just suppress error).

   `load_profile` doesn't automatically call `register_data`,
       this might be different from pySurf.


.. py:function:: load_profile(file, *args, **kwargs)

   The simplest file loader using np.genfromtxt.
   Returns x and y.


.. py:function:: merge_profile(x1, y1, x2, y2)

   stitch profiles


.. py:function:: save_profile(filename, x, y, **kwargs)

   Use np.savetxt to save x and y to file


.. py:function:: get_stats(x, y=None, units=None)


.. py:function:: level_profile(x, y=None, degree=1)

   return profile after removal of a (Legendre) polynomial component.
   polyfit_profile has an option to change the polynomial base if Legendre is not the desired base.


.. py:function:: sort_profile(x, y, reverse=False)

   sort profile on the base of x.


.. py:function:: remove_profile_outliers(y, nsigma=3, includenan=True)

   remove outliers from a profile by interpolation.
   y is modified in place. Mask of outliers is returned.


.. py:function:: movingaverage(values, window)

   for now, only odd windows. Full returns


.. py:function:: rebin_profile(x, y, *args, **kwargs)

   Flexible rebin of a profile. Reduces number of points without losing information.
   Uses `stats.binned_statistics` of which keeps the interface.


.. py:function:: crop_profile(x, y=None, xrange=None, yrange=None, *args, **kwargs)

   Crop a profile to range (can be set to None) in x and y.
   Experimental, crop on y leaves holes in profile.


.. py:function:: resample_profile(x1, y1, x2, y2=None)

   resample y1 (defined on x1) on x2.
   Both x1 and y1 need to be set for input data,
       x2 is returned together with interpolated values as a tuple.
   y2 is not used and put for consistency (can be omitted).



.. py:function:: sum_profiles(x1, y1, x2, y2, *args, **kwargs)


.. py:function:: subtract_profiles(x1, y1, x2, y2, *args, **kwargs)


.. py:function:: merge_profiles(profiles, ranges=None)

   da trim_psds_group in ICSO2020_review

   Makes a single profile trimming and averaging multiple ones
   according to selection.

   this is lauched to trim a single set of psds related to same sample (or same context).
   ranges, profiles, labels are lists with same number of elements,
   describing respectively:
   ranges for each psd (if None, the psd is not included in the output).
       If set to None, include all data.
   labels to be used in plot.
   outname: if provided generate plot of trim and txt with resulting psd.



.. py:function:: calculate_barycenter(x, y)

   return the x of barycenter using y as weight function.


.. py:function:: reflect_profile(xx, yy, center=None, split=False, xout=None)

   Return the profile x, y mirrored around x=center.
   If split is set return a list of the two profiles >,<
   as [[xpos,ypos],[xneg,yneg]].
   If xout is passed it is used to interpolate the double
   profiles. If split is not selected and the initial profile
   is not symmetrical can give unexpected results.
   In case split is selected and center exactly matches one of the input points,
   center point is added to both profiles.


.. py:function:: calculate_HEW(x, y, center=None, fraction=0.5, profile=False)

   calculate HEW around center from profile x and y by integrating the two sides. If center is None, barycenter is calculated.
   Radius is returned that gives integrated height equal to `fraction`
   of total integral.
   If `profile` is set, a profile x0,y0 of the integrated intensity is returned, where x0 is distance from `center` and y0 is integrated y.


.. py:function:: plot_HEW(xout, yout, center=None, fraction=0.5)

   Plots details of HEW calculation.


.. py:function:: PSF_spizzichino(x, y, alpha=0, xout=None, energy=1.0, level=True, HEW=True)

   Try to use spizzichino theory as in PR notes to calculate Hthe PSF,
   return a vector of same length as xout.
   alpha is incidence angle from normal in degrees, alpha= 90 - shell slope for tilt removed profiles.
       Tilt can be included in the profile, in that case alpha is left to 0
      (total slope must be <0 and alpha>0, this means that profile with tilt is expected to be <0).
   xout can set the output intervals in theta on the focal plane (from specular angle), if not set 512 points are used.
   Lambda is wavelength in keV.


.. py:function:: PSF_raimondiSR(x, y, alpha=0, xout=None, energy=1.0)

   Try to use theory from Raimondi and Spiga A&A2015 to calculate the PSF for single reflection,
   return a vector of same length as xout.
   alpha is incidence angle from normal in degrees, alpha= 90 - shell slope for tilt removed profiles.
   Tilt can be included in the profile, in that case alpha is left to 0
      (total slope must be <0 and alpha>0, this means that profile with tilt is expected to be <0).
   xout can set the output intervals in theta on the focal plane (from specular angle), if not set 512 points are used.
   Lambda is wavelength in keV.


.. py:function:: test_reflect(xx=None, yy=None, center=None, outfolder=None)


.. py:function:: test_HEW()


