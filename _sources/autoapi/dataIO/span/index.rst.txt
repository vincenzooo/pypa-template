:py:mod:`dataIO.span`
=====================

.. py:module:: dataIO.span


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   dataIO.span.ispan
   dataIO.span.span
   dataIO.span.span_from_pixels
   dataIO.span.test_span_from_pixels
   dataIO.span.filtered_span



.. py:function:: ispan(array: numpy.array, size: bool = False, axis: int = None) -> numpy.array

   2018/02/09 as span, but works on indices rather than elements.


.. py:function:: span(array: numpy.array, size: bool = False, axis: int = None, index: bool = False) -> numpy.array

   Returns min and max of an array together as a array of couples (or their indices or interval size).
   :param size: If set, return the size of the interval instead of the span.
   :param index: If set, return indices instead of elements.

   .. rubric:: Example

   pts.shape  #pts is an array of x,y,z coordinates
   Out[206]: (270051, 3)

   s=span(pts,axis=0)   #get coordinate span
   s.shape
   Out[208]: (3, 2)

   s[0]  #span of x axis, works easily for 2d arrays, but see notes
         below for ndarrays.
   Out[209]: array([-34.3813775 ,  34.57937714])

   # separate axis spans:
   xs,ys,zs=span(pts,axis=0)
   xs
   Out[229]: array([-34.3813775 ,  34.57937714])

   xl,yl=span(pts0,axis=0)[:2] #get only x and y spans

   Note that couples [min,max] are accessible on last index.
   This has the effect to have a couple where the value returned by
     min and max would be a single value and the rank of the array is not changed.

   Note that the intent of the function is not to return a result that can be addressed as a 2-element list to give min and max as entire arrays (equal to array.min and array.max).
   For this behavior on ndim arrays, use instead directly np.nanmin and np.nanmax.

   In general, indexing span as list will have same effect it has on input array, and iteratively with the last axis being a couple [min,max] instead of a single value.

   `fit_cylinder` uses this function as:

       # pts.shape
       # Out[138]: (270051, 3)

       s=span(pts,axis=0)
       print ('X: [%6.3f,%6.3f]'%tuple(s[0]))
       print ('Y: [%6.3f,%6.3f]'%tuple(s[1]))
       print ('data range: [%6.3f,%6.3f]'%tuple(s[2]))



.. py:function:: span_from_pixels(p, n=None, delta=0)

   From an array with positions of pixel centers `p`, returns the entire range for pixels from side to side. Useful to adjust plot extent in imshow.

   `n` is the number of pixels to consider in the output range.

   `p` (defaults to n) is uniquely used to extract the range,
   which makes it possible, as alternative, to pass `p` as range.

   `delta` is used only if p has a single value (this is tested in the simplest way by checking `len(p) == 1`, doesn't account for any complex case, e.g. repeated values).

   In this case, the pixel width cannot be evaluated from the single `p` value, and `delta` is assumend as half width of the pixel to use. Can be set to 0 returns two identical values, as default in `dataIO.span()`).
   Not the most elegant, but if a negative value is passed, this is used as fraction of value.

   Usage example:

       s = span_from_pixels([100],n,delta=0.1)
       xs = np.linspace(s[0],s[1],n+1) # return the n+1 interval extremes

   More examples in `test_span_from_pixels`.

   note that np.linspace has flag retsteps to return step size.


.. py:function:: test_span_from_pixels()


.. py:function:: filtered_span(*args, **kwargs)


