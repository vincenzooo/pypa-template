:py:mod:`dataIO.arrays`
=======================

.. py:module:: dataIO.arrays


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   dataIO.arrays.stats
   dataIO.arrays.test_stats
   dataIO.arrays.is_nested_list
   dataIO.arrays.test_is_nested_list



.. py:function:: stats(data=None, units=None, string=False, fmt=None, vars=None)

   Return selected statistics on data as numerical array or list of strings (one for each stats).

   vars is a list of indices that select the variables to be included, wrt a list (if called without `data` returns a format representation of the variables in the list):
   0 - mean
   1 - stddev
   2 - rms
   3 - PV
   4 - min
   5 - max
   6 - number of elements

   N.B.: (1) is intended as the rms of the deviation from the mean, while (2) is the root mean square of the signal as value (wrt to zero).
   Note that span doesn't exclude nan data, put flag to tune this option.

   string if set to True return stats as strings. In this case a string `units` can be used to add a postfix to statistics. A finer control can be obtained by passing in `fmt` a list of format strings for each var.
   e.g.: the default is obtained with:

           fmt = ['mean: %.5g'+units,
                  'StdDev: %.5g'+units,
                  'rms: %.5g'+units,
                  'PV: %.5g'+units,
                  'min: %.5g'+units,
                  'max: %.5g'+units,
                  'n:  %i']

   2021/06/30 added rms (different from standard dev, which is centered about mean).


.. py:function:: test_stats(*args, **kwargs)


.. py:function:: is_nested_list(l)

   Return true if it is a nested list (at least one element is a list), False otherwise (all elements are scalar).
   Uses isinstance, so arrays are not considered lists.
   from https://stackoverflow.com/questions/24180879/python-check-if-a-list-is-nested-or-not.


.. py:function:: test_is_nested_list()

   testvalues=[None,[None],[None,[],[]],[[1,2,3]],[3],[[3]],[[],[2],[3]],[[1],[2],[3]],[[1],[2],[3]],[[1],[2,3],[3]],[[2,3],[],[3]]]
   '''
   None | False
   [None] | False
   [None, [], []] | True
   [[1, 2, 3]] | True
   [3] | False
   [[3]] | True
   [[], [2], [3]] | True
   [[1], [2], [3]] | True
   [[1], [2], [3]] | True
   [[1], [2, 3], [3]] | True
   [[2, 3], [], [3]] | True
   '''


