:py:mod:`dataIO.superlist`
==========================

.. py:module:: dataIO.superlist

.. autoapi-nested-parse::

   Extensible vectorizable list.

   In final version has list properties `iterators`,
   `aggregator`,`expanded` containing methods that are vectorized in different ways. Iterator is default, return a list with each element obtained by applying its method with same name to each element of `superlist`.
   Aggregator accumulate a binary operation, returning a single value. Expanded return a single element by passing the content of `superlist` as n elements to the element method.
   Note that passing parameters must be handled accordingly. In particular a list of parameters or a single value can be passed to iterators, however this can create ambiguity. For example, an element method can accept list or single values, so it is not clear when a list is passed to superlist, if this means that the same list is passed to all elements as list argument of element method, rather than passing each element of list argument as scalar argument of elements method. There is no ambiguity if a list of lists or a list with len different from number of superlist elements, this should be checked, otherwise a warning should be visualized telling about the possible ambiguity and default action (possibly passing one value per element, call with nested list [[element]] to apply as list to all values).

   In this experimental version, different ways to access object methods are tested.

   functions operating on a list of Data2D objects

   Another problem is to make sure that superlists are returned on list operators like slices, how to do this? Metaclasses?

   2020/05/26 moved to dataIO



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dataIO.superlist.Superlist
   dataIO.superlist.superlist1
   dataIO.superlist.superlist2
   dataIO.superlist.superlist3
   dataIO.superlist.superlist4
   dataIO.superlist.superlist_alt
   dataIO.superlist.superlist5
   dataIO.superlist.Superlist6



Functions
~~~~~~~~~

.. autoapisummary::

   dataIO.superlist.test_superlist_dlist
   dataIO.superlist.test_superlist



.. py:class:: Superlist

   Bases: :py:obj:`list`

   A list of pySurf.Data2D objects on which unknown operations are performed serially.

   .. py:method:: __getattr__(self, name, *args, **kwargs)



.. py:class:: superlist1

   Bases: :py:obj:`list`

   Test class that vectorizes methods. Basic, implements properties,
   but not methods.

   .. py:method:: __getattr__(self, name)



.. py:class:: superlist2

   Bases: :py:obj:`list`

   Test class that vectorizes methods.

   .. py:method:: __getattr__(self, name)



.. py:class:: superlist3

   Bases: :py:obj:`list`

   Test class that vectorizes methods.

   .. py:method:: __getattr__(self, name)



.. py:class:: superlist4

   Bases: :py:obj:`list`

   Test class that vectorizes methods.

   .. py:method:: __getattr__(self, name)



.. py:class:: superlist_alt

   Bases: :py:obj:`list`

   2021/07/14 da https://stackoverflow.com/questions/2704434/intercept-method-calls-in-python anche testata in Dlist.

   .. py:method:: __getattribute__(self, name)

      Return getattr(self, name).



.. py:class:: superlist5

   Bases: :py:obj:`list`

   2021/07/14 da Dlist, versione funzionante con proprieta' e metodi, portata qui e non testata.

   .. py:method:: __getattr__(self, name, *args, **kwargs)



.. py:class:: Superlist6

   Bases: :py:obj:`list`

   Working version for debug of getattr/getattribute.
   print messages.

   .. py:method:: __getattr__(self, name, *args, **kwargs)


   .. py:method:: __getattribute__(self, name)

      Return getattr(self, name).



.. py:function:: test_superlist_dlist(D)


.. py:function:: test_superlist(cls, obj=None)


