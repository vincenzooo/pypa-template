:py:mod:`src.pySurf.fit_cylinder`
=================================

.. py:module:: src.pySurf.fit_cylinder


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   src.pySurf.fit_cylinder.closest_point_on_line
   src.pySurf.fit_cylinder.cylinder_error
   src.pySurf.fit_cylinder.cylinder_error3
   src.pySurf.fit_cylinder.cone_error
   src.pySurf.fit_cylinder.cone_error3
   src.pySurf.fit_cylinder.subtract_cylinder
   src.pySurf.fit_cylinder.subtract_cone
   src.pySurf.fit_cylinder.fit_cone
   src.pySurf.fit_cylinder.fit_cylinder



Attributes
~~~~~~~~~~

.. autoapisummary::

   src.pySurf.fit_cylinder.fom_func


.. py:function:: closest_point_on_line(points, lVersor, lPoint)

   From a list of points in 3D space as Nx3 array, returns a Nx3 array with the corresponding closest points on the line.


.. py:function:: cylinder_error(odr=(0, 0, 0, 0, 0, 0), points=None, retall=False, extra=False)

   Given a set of N points in format Nx3, returns the error on the cylinder defined by origin and direction as a 6(3+3) dim vector.
   If retall is set, additional values are returned :
       radius: best fit radius for the cylinder.
       deltaR[N,3]: deviation from radius for each point.
   extra is equivalent to retall, renamed 2018/02/15 kept for backward compatibility


.. py:function:: cylinder_error3(odr: float = (0, 0, 0, 0), points: float = None, radius: float = None, retall: bool = False, extra: bool = False, xy: bool = False) -> float

   Calculate rms surface error for points wrt a cylinder defined by axis vector.

   Given a set of N points in format Nx3, returns the error on the cylinder defined by origin and direction of axis. Best fit radius is calculated as best fit if not provided. Otherwise the provided value is used with no fit.
   nan are not allowed and must be filtered before calling the function (this is more efficient if the function is called many times, e.g. in optimization).
   :param points: points in format Nx3
   :param odr: 4-element axis vector in format (origin_y,origin_z,direction_x,direction_z)
   :param radius: If provided, radius is used, otherwise best fit radius for the given axis is calculated.
   :type radius: optional
   :param retall: if set, additional values are returned :
                  radius: best fit radius for the cylinder.
                  deltaR[N,3]: deviation from radius for each point.
   :type retall: optionall

   extra (optional) : equivalent to retall, renamed 2018/02/15 kept for backward compatibility.

   :returns: rms of radial distance of points from ideal cylindrical surface.


.. py:function:: cone_error(odr=(0, 0, 0, 0, 0, 0), points=None, retall=False, extra=False)

   Given a set of N points in format Nx3, returns the rms surface error on the cone defined by origin (intercept of the axis with x=0) and direction,
   passed as 4-vector odr(origin_y,origin_z,direction_x,direction_z).
   Best fit cone for odr is calculated from linear fit of data.
   If retall is set, additional values are returned :
   coeff: best fit radius for the cone as [m,q] for x' distance from x=0 plan on cone axis R(x')=m x' + q. Half cone angle is atan(m).
   deltaR[N,3]: deviation from radius for each point.
   extra is equivalent to retall, renamed 2018/02/15 kept for backward compatibility


.. py:function:: cone_error3(odr=(0, 220.0, 0, 0), points=None, coeff=None, retall=False, extra=False)

   Given a set of N points in format Nx3, returns the rms surface error on the cone defined by
   its axis (radius and apex are determined by best fit).
   Axis is defined as a 4 elements vector odr=(x,z,cx,cz), not in xz plane.
   origin (intercept of the axis with y=0) and director cosines.
   If coeff is passed as input, the fit for cone surface is not performed and the coeff values are used.
   If retall is set, additional values are returned :
   coeff: best fit radius for the cone as [m,q] for x' distance from x=0 plan on cone axis R(x')=m x' + q. Half cone angle is atan(m).
   deltaR[N,3]: deviation from radius for each point. Bump positive convention (smaller radius is positive).
   extra is equivalent to retall, renamed 2018/02/15 kept for backward compatibility


.. py:function:: subtract_cylinder(pp, odr, sampleName='')

   odr: 6-vector (origin_y,origin_y,origin_z,direction_x,direction_y,direction_z),
       note that  this is redundant, since only two components are enough for direction
       (magnitude is irrelevant).
   pp: complete set of points Npx3


.. py:function:: subtract_cone(pp, odr, sampleName='', outfile=None, vmin=None, vmax=None)

   odr: 6-vector (origin_y,origin_y,origin_z,direction_x,direction_y,direction_z),
       note that  this is redundant, since only two components are enough for direction
       (magnitude is irrelevant).
   pp: complete set of points Npx3


.. py:function:: fit_cone(pts, odr2, zscale=1.0, keepnan=False, **kwargs)

   fit pts and return residuals. Info are printed. odr2 is starting guess.

   fom,deltaR,pars=fit_cone(pts,odr2,fom_func)
   zscale is the factor to multiply data to obtain same units as x and y,
   e.g. 1000. for x and y in mm and z in um. Output is in same unit as input.
   pts and deltaR enter and exit with z in microns
   parameters for optimization can be passed as keyword arguments, e.g.:

   #evaluate fom without optimization fit_cone/fit_cylinder
   deltaR,o = fom_function(pts,odr,zscale=1000.,options={'radius':radius})

   # fit from starting guess value odr0
   deltaR,odr=fit_cylinder(c,odr0,zscale=1000.,options={'maxiter':500},
       method='Nelder-Mead')

   typically:
   odr2=(span(xg).sum()/2.,220.,0,0.) #use nominal value for guess direction.

   See developer notes in code.


.. py:function:: fit_cylinder(pts, odr2, zscale=1.0, keepnan=False, align=False, **kwargs)

   fit pts and return residuals. Info are printed.
   odr2: starting guess for fom func parameters.
       for cylinder_error3, it is (origin_y,origin_z,direction_x,direction_z),
       meaning for axis nearly parallel to y: odr2=(x_center,R,0.,0.)
       fom,deltaR,pars=fit_cylinder(pts,odr2,fom_func)
   zscale: factor to divide z data to obtain same units as x and y,
       e.g. 1000. for x and y in mm and z in um. Output is in same unit as input.
   parameters for optimization with scipy.optimize.minimize can be passed as keyword arguments,
       e.g.: deltaR,odr=fit_cylinder(c,odr2,options={'maxiter':500},method='Nelder-Mead')
   if keepnan is set True nans are reinserted after the fit keeping same size for array,
       otherwise nans are removed.
   if align is set True, rotate data to align axis and return residuals on rotated grid (can be resampled on data or viceversa
   with resample_points)-- NOT WORKING


.. py:data:: fom_func
   

   

