:py:mod:`src.plotting.add_clickable_markers`
============================================

.. py:module:: src.plotting.add_clickable_markers


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.plotting.add_clickable_markers.modify_markers
   src.plotting.add_clickable_markers.push_to_advance



Functions
~~~~~~~~~

.. autoapisummary::

   src.plotting.add_clickable_markers.add_clickable_markers
   src.plotting.add_clickable_markers.add_clickable_markers2
   src.plotting.add_clickable_markers.test_interac
   src.plotting.add_clickable_markers.test_interac2
   src.plotting.add_clickable_markers.test_multimarkers
   src.plotting.add_clickable_markers.test_loop
   src.plotting.add_clickable_markers.test_add_clickable_markers
   src.plotting.add_clickable_markers.test_multiaxis
   src.plotting.add_clickable_markers.test_add_clickable_markers2
   src.plotting.add_clickable_markers.test_hold
   src.plotting.add_clickable_markers.test_disconnect
   src.plotting.add_clickable_markers.retax



Attributes
~~~~~~~~~~

.. autoapisummary::

   src.plotting.add_clickable_markers.ps1


.. py:data:: ps1
   :annotation: = SOMETHING

   

.. py:function:: add_clickable_markers(fig=None, ax=None, key='enter', propertyname='markers', modkey='control', hold=False)

   Makes pickable the image (image only) in the current figure.
   add a list `propertyname` to the figure. if axis is passed, markers are added only to specific axis. This way it is possible to associate differently named markers to
       different axis in same figure.

       Deprecated, use add_clickable_markers2


.. py:function:: add_clickable_markers2(ax=None, key='enter', propertyname='markers', modkey='control', hold=False)

   Enable adding markers by point and click to the passed or current axis. Returns axis.

   Markers are added by mouse left click + modkey and are stored in a list added
       to the axis as a property `propertyname`. They can be removed by modkey
       + mouse right click.
       `key` disconnect user interface stopping point and click operations.
   Markers with different propertyname can be associated to same axis.
   hold is implemented in experimental way, only one axis should hold. Not sure
       what happens otherwise. Even with this working version there is flickering.

   This is updated version of add_clickable_markers, associate with axis,
       not with figure so it is safe to use on subplots.
   ex:
   ax1=add_clickable_markers2()    #use current axis
   ax1=add_clickable_markers2(ax=ax1)   #use a specific axis
   print (ax1.markers)  #run this after markers are added

   2018 vcotroneo@cfa.harvard.edu


.. py:class:: modify_markers

   Bases: :py:obj:`object`

   .. py:method:: add_step_through(self, gen, key)



.. py:class:: push_to_advance

   Bases: :py:obj:`object`

   .. py:method:: add_step_through(self, gen, key)



.. py:function:: test_interac()

   2018/09/05 try to solve with new idea of calling add_clickable_markers2 as a function that returns a value only
   when a key is pressed. to do this the interactive mode of matplotlib must be off.
   This works perfectly if imported from ipython shell, but if
   called in qtconsole from jupyter notebook, doesn't disable
   interactive mode.


.. py:function:: test_interac2()

   This probably works better than anything else. Still has flickering, but works from both ipython and jupyter.

   For some strange reason, pause and coord must be
   made global, while there is no need for cid.
   Maybe because global and pause are in functions linked to mpl,
   while remove_cids is independent?


.. py:function:: test_multimarkers()

   plots two datasets in subplots, return axis with attached clickable markers
   (CTRL+button). return axis ax1 and ax2 with markers properties attached named respectively
   ax1.m1 and ax2.m2


.. py:function:: test_loop()

   test for first version add_clickable_markers (on figure, deprecated).


.. py:function:: test_add_clickable_markers(a)


.. py:function:: test_multiaxis(ax1, ax2, hold=False)

   plot on two axis in a blocking or non blocking mode.


.. py:function:: test_add_clickable_markers2(a, b)


.. py:function:: test_hold(a)

   test hold mechanism independently by how it is implemented inside
   add_clickable_marker2.
   test single axis figure and figure with two subplots holding until enter
       key is pressed.


.. py:function:: test_disconnect()

   test access to connection ids from functions in event handling. these
   are not stored anywhere, so they must be stored at event function definition
   from main function body.


.. py:function:: retax()

   diagnostic routine. return coordinates of all plotted points,
   assuming this are the symbols for the plotted markers.


