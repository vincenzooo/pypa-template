:py:mod:`src.pyProfile.profile_v1`
==================================

.. py:module:: src.pyProfile.profile_v1

.. autoapi-nested-parse::

   Created on Sun Mar 06 16:06:48 2016
   v1 Saved 2018/08/27 after radical change to raimondi-spiga routine
   without saving previous version.
   It might be worth to recover it from backups.

   @author: Vincenzo Cotroneo
   @email: vcotroneo@cfa.harvard.edu



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   src.pyProfile.profile_v1.line
   src.pyProfile.profile_v1.make_signal
   src.pyProfile.profile_v1.make_circle
   src.pyProfile.profile_v1.polyfit_profile
   src.pyProfile.profile_v1.save_profile
   src.pyProfile.profile_v1.level_profile
   src.pyProfile.profile_v1.remove_profile_outliers
   src.pyProfile.profile_v1.movingaverage
   src.pyProfile.profile_v1.rebin_profile
   src.pyProfile.profile_v1.crop_profile
   src.pyProfile.profile_v1.subtract_profiles
   src.pyProfile.profile_v1.calculate_barycenter
   src.pyProfile.profile_v1.mirror_profile
   src.pyProfile.profile_v1.calculate_HEW
   src.pyProfile.profile_v1.PSF_spizzichino
   src.pyProfile.profile_v1.PSF_raimondiSR
   src.pyProfile.profile_v1.test_mirror
   src.pyProfile.profile_v1.test_HEW



.. py:function:: line(x, y=None)

   return line through end points of x,y.
       x and y are vectors, can be of different length (e.g. y can be a 2-elements vector).
   If only one vector is provided, it is assumend as equally spaced points.


.. py:function:: make_signal(amp, L, N, nwaves, ystartend=(0, 0), noise=0.0, minus_one=False)

   Build a signal of length L and number of points N, as a sum of a sinusoid, a line and a noise. minus_one remove last point (just a convenience e.g.
   for a periodic profile).


.. py:function:: make_circle(x, c, r, sign=1)

   plot positive part if sign is positive, negative if negative.


.. py:function:: polyfit_profile(x, y=None, degree=1)

   return polynomial of degree that fits the profile.


.. py:function:: save_profile(filename, x, y, **kwargs)


.. py:function:: level_profile(x, y=None, degree=1)

   return profile after removal of a polynomial component.


.. py:function:: remove_profile_outliers(y, nsigma=3, includenan=True)

   remove outliers from a profile by interpolation.
   y is modified in place. Mask of outliers is returned.


.. py:function:: movingaverage(values, window)

   for now, only odd windows. Full returns


.. py:function:: rebin_profile(x, y, *args, **kwargs)


.. py:function:: crop_profile(x, y, xrange=None, *args, **kwargs)


.. py:function:: subtract_profiles(x1, y1, x2, y2, *args, **kwargs)


.. py:function:: calculate_barycenter(x, y)

   return the x of barycenter using y as weight function.


.. py:function:: mirror_profile(xx, yy, center=None, split=False, xout=None)

   Return the profile x, y mirrored around x=center.
   If split is set return a list of the two profiles >,<
   as [[xpos,ypos],[xneg,yneg]].
   If xout is passed it is used to interpolate the double
   profiles. If split is not selected and the initial profile
   is not symmetrical can give unexpected results.
   In case split is selected and center exactly matches one of the input points,
   center point is added to both profiles.


.. py:function:: calculate_HEW(x, y, center=None, fraction=0.5)

   calculate HEW around center from profile x and y by integrating the two sides. If center is None, barycenter is calculated.
   Radius is returned that gives integrated height equal to `fraction`
   of total integral.


.. py:function:: PSF_spizzichino(x, y, alpha=0, xout=None, energy=1.0, level=True)

   Try to use spizzichino theory as in PR notes to calculate Hthe PSF,
   return a vector of same length as xout.
   alpha is incidence angle from normal in degrees, alpha= 90 - shell slope for tilt removed profiles.
       Tilt can be included in the profile, in that case alpha is left to 0
      (total slope must be <0 and alpha>0, this means that profile with tilt is expected to be <0).
   xout can set the output intervals in theta on the focal plane (from specular angle), if not set 512 points are used.
   Lambda is wavelength in keV.


.. py:function:: PSF_raimondiSR(x, y, alpha=0, xout=None, energy=1.0)

   Try to use theory from Raimondi and Spiga A&A2015 to calculate the PSF for single reflection,
   return a vector of same length as xout.
   alpha is incidence angle from normal in degrees, alpha= 90 - shell slope for tilt removed profiles.
   Tilt can be included in the profile, in that case alpha is left to 0
      (total slope must be <0 and alpha>0, this means that profile with tilt is expected to be <0).
   xout can set the output intervals in theta on the focal plane (from specular angle), if not set 512 points are used.
   Lambda is wavelength in keV.


.. py:function:: test_mirror(xx=None, yy=None, center=None, outfolder=None)


.. py:function:: test_HEW()


