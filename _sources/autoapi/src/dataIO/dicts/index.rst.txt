:py:mod:`src.dataIO.dicts`
==========================

.. py:module:: src.dataIO.dicts

.. autoapi-nested-parse::

   contains operations on dictionaries



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   src.dataIO.dicts.pop_kw
   src.dataIO.dicts.strip_kw
   src.dataIO.dicts.print_tree
   src.dataIO.dicts.test_filterByKey
   src.dataIO.dicts.example_pop_kw
   src.dataIO.dicts.test_pop_kw



Attributes
~~~~~~~~~~

.. autoapisummary::

   src.dataIO.dicts.filterByKey2


.. py:data:: filterByKey2
   

   

.. py:function:: pop_kw(kws, defaults=None, keylist=None, exclude=None)

   A multiple pop function for a dictionary, hopefully useful to filter kws and manage function **kwargs parameters.

   Return a dictionary of values corresponding to kws[k] for k in keylist by popping
     the element from kws.
   If k is present in a dictionary `defaults`, take the values from `defaults` if not present in kws.
     return a dictionary {key:val} with val from `kws` or `defaults` if in any of them.
   Another way of seeing the return value is as a copy of `defaults` where values are replaced
     (after popping them) from same key in kws.


       kwargs={'dog':'bau','cat':'miao'}
       defs={'dog':'barf','sheep':'bee'}

       #pop 'cat' and 'sheep' if they are in kwargs or take them from defaults if there,
       #  put them in res
       >>> res=pop_kw(kwargs,defaults=defs)
       >>> kwargs
       Out[103]: {'cat': 'miao'}
       >>> res
       Out[104]: {'dog': 'barf', 'sheep': 'bee'}

       #pop 'cat' and 'sheep' if they are in kwargs or take them from defaults if there,
       #  put them in res
       >>> res=pop_kw(kwargs, defaults = defs, keylist = ['cat','sheep'])
       >>> kwargs
       Out[103]: {}
       >>> res
       Out[104]: {'cat': 'miao', 'dog': 'bau', 'sheep': 'bee'}


   A typical usage can be dividing arbitrary **kwargs between different subroutines,
     where the subroutines might not accept **kwargs, and be constrained to specific list of parameters.
     To pass kwargs in this circumstance do inside the routine:

   Module `inspect` can be used to retrieve subfunction parameter names and make a safe call, this is done automatically in `strip_kw`, equivalently to:

      import inspect
      pars=list(inspect.signature(f1).parameters) #give list of all accepted parameters in f1
      res1=f1(arg1,**pop_kw(kwargs,keylist = pars)) #note that pars will have keys 'args' and 'kwargs' if
                           # f1 accepts arbitrary arguments. kws and defaults with same name can be
                           #  in conflict

   In general, if **kws are passed to a function that calls two other subs, each one with optional arguments, it can be used as (see full example in `dataIO.dicts.example_pop_kw`):

       def example_pop_kw(**kwargs):

           # here if passed directly with `res0=f1(arg1,**kwargs)` gives error because mes2 is not a defined parameter
           res1=f1(arg1,**pop_kw(kwargs,{'mes1':'blah!'},['mes1'])) #only mes1 is passed to res1 with default if not in kwargs:
           res2=f2(arg1,**kwargs)  #other remaining kwargs can be safely passed to f2

   2020/05/26 added `exclude` keywork, as a consequence of adding to strip_kw.
   Completely reviewed 2019/04/08, changed interface and function of keylist.




.. py:function:: strip_kw(kws, funclist, split=False, exclude=None, **kwargs)

   Enhanced version of pop_kw, kw can be extracted from inspection of a function (or a list  of functions).
   Defaults can be passed as kwargs.
   `exclude` is a list of keys that are kept in kws unchanged
      and not returned.

   2020/05/26 added `exclude`.
   Use case is presented from problems with psd_analysis.
   `psd2d.psd_analysis` calls `strip_kw(kwargs,psd2d_analysis,title="")`.
   `ps2d_analysis` has keyword `units`, that is not used in this case (used, only if called with `analysis=True`). Here we want to preserve `units` to strip it later.

   Old notes:
       was in theory a safer version of the first pop_kw.
          I am not sure in what it was supposed to be "safer",
      but it was accepting functions as input.
          It might have been used a negligible amount of times.

      sub_kw=strip_kw(kws,[sub],def1=val1,def2=val2)


.. py:function:: print_tree(tree, depth=0)

   print dictionary as tree, recursively calling itself,
   based on http://www.siafoo.net/snippet/91


.. py:function:: test_filterByKey()


.. py:function:: example_pop_kw()


.. py:function:: test_pop_kw(function=pop_kw)

   run a set of dict stripping tests using a function with interface compatible with `pop_kw`.
   uses pop_kw if function is not provided.


